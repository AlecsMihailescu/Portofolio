/* Alexandru Mihailescu
 */

#include <iostream>
#include <iomanip>

using namespace std;

class Time
{
public:
    Time( int = 0, int = 0, int = 0 );
    
    // set functions
    void setTime( int, int, int );
    void setHour( int );
    void setMinute( int );
    void setSecond( int );
    
    // get functions
    int getHour();
    int getMinute();
    int getSecond();
    
    void printUniversal();
    void printStandard();
    
private:
    int hour;
    int minute;
    int second;
};

// Time constructor initializes each data member to zero
Time::Time( int hour, int minute, int second )
{
    setTime( hour, minute, second ); // validate and set time
} 

// set new Time value using universal time
void Time::setTime( int h, int m, int s )
{
    setHour( h );
    setMinute( m );
    setSecond( s );
}


void Time::setHour( int h )
{
    if ( h >= 0 && h < 24 )
    {
        hour = h;
    }
    else
        throw invalid_argument("hour must be 0-23" );
}


void Time::setMinute( int m )
{
    if ( m >= 0 && m < 60 )
    {
        minute = m;
    }
    else
        throw invalid_argument("minute must be 0-59" );
}


void Time::setSecond( int s )
{
    if ( s >= 0 && s < 60 )
    {
        second = s;
    }
    else
        throw invalid_argument("second must be 0-59" );                                                                                             }


int Time::getHour()
{
    return hour;
}


int Time::getMinute()
{
    return minute;
} 


int Time::getSecond()
{
    return second;
} 

// print Time in universal-time format (HH:MM:SS)
void Time::printUniversal()
{
    cout << setfill( '0' ) << setw( 2 ) << getHour() << ":"
    << setw( 2 ) << getMinute() << ":" << setw( 2 ) << getSecond();
} 

// print Time in standard-time format (HH:MM:SS AM or PM)
void Time::printStandard()
{
    cout << ( ( getHour() == 0 || getHour() == 12 ) ? 12 : getHour() % 12 ) << ":" << setfill( '0' ) << setw( 2 ) << getMinute()
    << ":" << setw( 2 ) << getSecond() << ( hour < 12 ? " AM" : " PM" );
} 

int main ()
{
    time_t rawtime;
    struct tm * timeinfo;
    
    time ( &rawtime );
    timeinfo = localtime ( &rawtime );
    
    int hours = timeinfo->tm_hour;
    int minutes = timeinfo->tm_min;
    int seconds = timeinfo->tm_sec;
    cout << "Hours: " << hours << " Mins: " << minutes << " seconds: " << seconds << endl;
    
    Time timeObject ( hours, minutes, seconds );
    
    timeObject.printStandard();
    std::cout << std::endl;
    timeObject.printUniversal();
    std::cout << std::endl;
    
    
    return 0;
}
 
